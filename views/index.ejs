<!DOCTYPE html>

<html lang="en">
<head>
    <title>twitterVR</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0, shrink-to-fit=no">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <style>
        body {
            width: 100%;
            height: 100%;
            background-color: #000;
            color: #fff;
            margin: 0px;
            padding: 0;
            overflow: hidden;
        }

        /* Position the button on the bottom of the page. */
        #ui {
            position: absolute;
            bottom: 10px;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            font-family: 'Karla', sans-serif;
            z-index: 1;
        }

        a {
            color: gray;
        }
    </style>
</head>

<body>
<div id="ui">
    <div id="vr-button"></div>
    <a id="magic-window" href="#">Try it without a headset</a>
</div>
</body>

<script src = "js/jquery-3.1.1.min.js"></script>

<script>
    /*
     * Debug parameters.
     */
    WebVRConfig = {
        /**
         * webvr-polyfill configuration
         */

        //BUFFER_SCALE: 0.5, // default: 1.0
    };
</script>

<!--
  A polyfill for Promises. Needed for IE and Edge.
-->
<script src="js/es6-promise.min.js"></script>

<!--
  three.js 3d library
-->
<script src="js/three.min.js"></script>

<!--
  VRControls.js acquires positional information from connected VR devices and applies the transformations to a three.js camera object.
-->
<script src="js/VRControls.js"></script>

<!--
  VREffect.js handles stereo camera setup and rendering.
-->
<script src="js/VREffect.js"></script>

<!--
  A polyfill for WebVR using the Device{Motion,Orientation}Event API.
-->
<script src="js/webvr-polyfill.min.js"></script>

<!--
  A set of UI controls for entering VR mode.
-->
<script src="js/webvr-ui.min.js"></script>

<script src="js/THREE.MeshLine.js"></script>
<script src="js/ejs_production.js"></script>


<script src="stream.js"></script>

<script>
    // Last time the scene was rendered.
    var lastRenderTime = 0;
    // Currently active VRDisplay.
    var vrDisplay;
    // Various global THREE.Objects.
    var scene;
    var controls;
    var effect;
    var camera;
    // EnterVRButton for rendering enter/exit UI.
    var vrButton;

    var texture1;
    var texture2;
    var texture3;

    var canvas1 = document.createElement("canvas");
    var context1 = canvas1.getContext("2d");

    var canvas2 = document.createElement("canvas");
    var context2 = canvas2.getContext("2d");

    var canvas3 = document.createElement("canvas");
    var context3 = canvas3.getContext("2d");

    var text1 = "";
    var text2 = "";
    var text3 = "";

    // Setup three.js WebGL renderer. Note: Antialiasing is a big performance hit.
    // Only enable it if you actually need to.
    var renderer = new THREE.WebGLRenderer({antialias: true});
    renderer.setPixelRatio(window.devicePixelRatio);

    // Append the canvas1 element created by the renderer to document body element.
    document.body.appendChild(renderer.domElement);

    // Create a three.js scene.
    scene = new THREE.Scene();
    scene.background = new THREE.Color( 0xffffff );

    // Create a three.js camera.
    var aspect = window.innerWidth / window.innerHeight;
    camera = new THREE.PerspectiveCamera(50, aspect, 0.1, 10000);

    controls = new THREE.VRControls(camera);
    controls.standing = true;
    camera.position.y = controls.userHeight;

    // Apply VR stereo rendering to renderer.
    effect = new THREE.VREffect(renderer);
    effect.setSize(window.innerWidth, window.innerHeight);

    //GEOMETRY!
    // smooth my curve over this many points
    var numPoints = 300;

    var extrudeBend1 = new THREE.CatmullRomCurve3([
        new THREE.Vector3( 0, controls.userHeight+10, 40 ),
        new THREE.Vector3( -40, controls.userHeight+10, 0 ),
        new THREE.Vector3( 0, controls.userHeight+10, -40 ),
        new THREE.Vector3( 40, controls.userHeight+10, 0 )
    ]);

    var extrudeBend2 = new THREE.CatmullRomCurve3([
        new THREE.Vector3( 0, controls.userHeight, 40 ),
        new THREE.Vector3( -40, controls.userHeight, 0 ),
        new THREE.Vector3( 0, controls.userHeight, -40 ),
        new THREE.Vector3( 40, controls.userHeight, 0 )
    ]);

    var extrudeBend3 = new THREE.CatmullRomCurve3([
        new THREE.Vector3( 0, controls.userHeight-10, 40 ),
        new THREE.Vector3( -40, controls.userHeight-10, 0 ),
        new THREE.Vector3( 0, controls.userHeight-10, -40 ),
        new THREE.Vector3( 40, controls.userHeight-10, 0 )
    ]);

    extrudeBend1.closed = true;
    extrudeBend2.closed = true;
    extrudeBend3.closed = true;

    var geometry1 = new THREE.Geometry();
    var geometry2 = new THREE.Geometry();
    var geometry3 = new THREE.Geometry();

    var splinePoints1 = extrudeBend1.getPoints(numPoints);
    var splinePoints2 = extrudeBend2.getPoints(numPoints);
    var splinePoints3 = extrudeBend3.getPoints(numPoints);

    for(var i = 0; i < splinePoints1.length; i++){
        geometry1.vertices.push(splinePoints1[i]);
        geometry2.vertices.push(splinePoints2[i]);
        geometry3.vertices.push(splinePoints3[i]);
    }

    var tube1 = new THREE.TubeBufferGeometry( extrudeBend1, 200, 3, 2 );
    var tube2 = new THREE.TubeBufferGeometry( extrudeBend2, 200, 3, 2 );
    var tube3 = new THREE.TubeBufferGeometry( extrudeBend3, 200, 3, 2 );

    texture1 = new THREE.CanvasTexture( canvas1 );
    texture2 = new THREE.CanvasTexture( canvas2 );
    texture3 = new THREE.CanvasTexture( canvas3 );

    var tubeMaterial1 = new THREE.MeshBasicMaterial( {
        map: texture1,
    });
    var tubeMaterial2 = new THREE.MeshBasicMaterial( {
        map: texture2,
    });
    var tubeMaterial3 = new THREE.MeshBasicMaterial( {
        map: texture3,
    });

    var tubeMesh1 = new THREE.Mesh(tube1, tubeMaterial1);
    var tubeMesh2 = new THREE.Mesh(tube2, tubeMaterial2);
    var tubeMesh3 = new THREE.Mesh(tube3, tubeMaterial3);

    scene.add(tubeMesh1);
    scene.add(tubeMesh2);
    scene.add(tubeMesh3);

    init();
    setupStage();


    function makeTexture(context, canvas, text){
        context.fillStyle = 'black';
        context.fillRect(0, 0, canvas.width, canvas.height);
        var y = canvas.height / 4;
        context.canvas.width  = 4096;
        context.canvas.height = 128;
        context.font = "40pt Calibri";
        context.textAlign = "left";
        context.textBaseline = "middle";
        context.fillStyle = "white";
        context.fillText(text, 10, y);
    }

    function init() {




        window.addEventListener('resize', onResize, true);
        window.addEventListener('vrdisplaypresentchange', onResize, true);

        // Initialize the WebVR UI.
        var uiOptions = {
            color: 'white',
            background: 'black',
            corners: 'square'
        };
        vrButton = new webvrui.EnterVRButton(renderer.domElement, uiOptions);
        vrButton.on('exit', function() {
            camera.quaternion.set(0, 0, 0, 1);
            camera.position.set(0, controls.userHeight, 0);
            tubeMaterial.side = THREE.FrontSide;
            tubeMaterial.needsUpdate = true;
        });
        vrButton.on('hide', function() {
            document.getElementById('ui').style.display = 'none';
        });
        vrButton.on('show', function() {
            document.getElementById('ui').style.display = 'inherit';
        });
        document.getElementById('vr-button').addEventListener('click', function() {
            tubeMaterial.side = THREE.BackSide;
            tubeMaterial.needsUpdate = true;
            texture1.wrapS = texture1.wrapT = THREE.RepeatWrapping;
            texture1.flipY = false;
            texture1.offset.y = -0.5;
        });
        document.getElementById('vr-button').appendChild(vrButton.domElement);
        document.getElementById('magic-window').addEventListener('click', function() {
            vrButton.requestEnterFullscreen();
        });


    }




    // Request animation frame loop function
    function animate(timestamp) {
        var delta = Math.min(timestamp - lastRenderTime, 200);
        lastRenderTime = timestamp;

        //requestAnimationFrame( animate );

        makeTexture(context1, canvas1, text1);
        makeTexture(context2, canvas2, text2);
        makeTexture(context3, canvas3, text3);

        texture1.needsUpdate = true;
        texture2.needsUpdate = true;
        texture3.needsUpdate = true;

        // Only update controls if we're presenting.
        if (vrButton.isPresenting()) {
            controls.update();
            texture1.needsUpdate = true;
        }
        vrDisplay.requestAnimationFrame(animate);
        //render the scene
        effect.render( scene, camera );


    }

    function onResize(e) {
        effect.setSize(window.innerWidth, window.innerHeight);
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
    }

    // Get the HMD, and if we're dealing with something that specifies
    // stageParameters, rearrange the scene.
    function setupStage() {
        navigator.getVRDisplays().then(function(displays) {
//            tubeMaterial.side = THREE.BackSide;
//            tubeMaterial.needsUpdate = true;

            if (displays.length > 0) {
                vrDisplay = displays[0];
                if (vrDisplay.stageParameters) {
                    setStageDimensions(vrDisplay.stageParameters);
                }
                vrDisplay.requestAnimationFrame(animate);

            }
        });
    }

    function setStageDimensions(stage) {

//        tubeMaterial.side = THREE.BackSide;
//        tubeMaterial.needsUpdate = true;

        // Place the cube in the middle of the scene, at user height.
        //cube.position.set(0, controls.userHeight, 0);
    }

    //window.addEventListener('load', onLoad);
</script>

<script src="/socket.io/socket.io.js"></script>
<script>

    var socket = io();
    socket.on('newT1', function(msg){
            text1 = msg;
    });
    socket.on('newT2', function(msg){
        text2 = msg;
        //text2 = "hi!!";
    });
    socket.on('newT3', function(msg){
        text3 = msg;
        //text2 = "hi!!";
    });



</script>

</html>
